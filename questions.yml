---
questions:
  - category: "IAM"
    prompt: "What is a trust policy in the context of an IAM role?"
    choices:
      - "A trust policy determines which principals are allowed to assume the IAM role"
      - "A trust policy determines which AWS accounts are allowed to assume the IAM role"
      - "A trust policy determines which security credentials can be associated with the IAM role"
      - "A trust policy determines which services the IAM role is allowed to operate on"
    correct_answer_idx: 0
  - category: "IAM"
    prompt: "You need to provide AWS credentials to an EC2 instance so that an application running on the instance can contact the S3 and DynamoDB services. How should you provide AWS credentials to the instance?"
    choices:
      - "Create an IAM role. Assign the role to an instance profile. Attach the instance profile to the EC2 instance"
      - "Create an IAM user. Generate security credentials for the IAM user, then write them to ~/.aws/credentials on the EC2 instance"
      - "SSH into the EC2 instance. Export the ${AWS_ACCESS_KEY_ID} and ${AWS_SECRET_ACCESS_KEY} environment variables so that the application running on the instance can contact the other AWS services"
    correct_answer_idx: 0
  - category: "IAM"
    prompt: "What should you do with the root account user?"
    choices:
      - "Use it to resolve permissions issues that are preventing services from functioning properly in your AWS account"
      - "Store its login credentials in a secure password manager. Then, never use the root user. Create an IAM user and attach Administrator permissions to it. Use the IAM user for daily work"
      - "Only log into when you need to administer sensitive account settings such as billing, address or payment information"
  - category: "Lambda"
    prompt: "What is the maximum amount of time a lamdba function can run for?"
    choices:
      - "10 minutes"
      - "5 minutes"
      - "15 minutes"
      - "25 minutes"
      - "35 minutes"
    correct_answer_idx: 2
  - category: "Lambda"
    prompt: "By default, how many concurrent executions does a lambda function support?"
    choices: 
      - "250"
      - "500"
      - "750" 
      - "1000"
  - category: "Lambda"
    prompt: "Which of the following are valid ways to invoke a lambda function?"
    choices: 
      - "Invoke directly via the Lambda console"
      - "Calling the function URL HTTP(s) endpoint"
      - "Calling the Lambda API"
      - "Using the AWS CLI or SDKs"
      - "Invoke via events from other AWS services"
      - "Reading from a stream or queue"
      - "All of the above"
    correct_answer_idx: 6
  - category: "Lambda"
    prompt: "What is the difference between asynchronous and synchronous lambda invocation?"
    choices: 
      - "Synchronous invocation ensures that all consumers of the lambda function will receive the same results"
      - "Synchronous invocation waits for lambda to process the event and return a response, whereas asynchronous invocation queues the work but returns a response immediately"
      - "Asynchronous invocation is less expensive and more reliable"
      - "Asynchronous invocation is not available for lambda functions"
      - "Synchronous invocation is not available for lambda functions"
    correct_answer_idx: 1
  - category: "Lambda"
    prompt: "In the context of Lambda, what is a trigger?"
    choices: 
      - "A trigger is a special condition you specify when creating your lambda that determines which inputs the function will accept"
      - "A trigger is a Lambda resource or a resource in another service that you configure to invoke your function in response to lifecycle events, external requests, or on a schedule"
      - "A trigger is a safety feature that allows you to quickly stop a lambda function from processing. It can be used to prevent your lambda from operating on unsafe data"
      - "A trigger is a signal you send to a lambda function that is misbehaving or encountering service issues due to rate limits. The trigger tells the lambda to shut down gracefully"
    correct_answer_idx: 1
  - category: "Lambda"
    prompt: "Can a single Lambda function have more than one trigger?"
    choices: 
      - "Yes"
      - "No"
    correct_answer_idx: 0
  - category: "Lambda"
    prompt: "If a lambda has multiple triggers configured, what is true of every event object sent to the function?"
    choices: 
      - "The event may or may not contain data from multiple sources or triggers"
      - "The event will contain data from the most recent invoker of the function"
      - "Each event will only ever contain data from a single client or trigger, because each invocation is independent, even when multiple clients or triggers are configured"
      - "Each event object will contain a reference to the other events received in the same time slice"
    correct_answer_idx: 2
  - category: "S3"
    prompt: "All S3 Bucket names must be globally unique across all of AWS"
    choices:
      - "True"
      - "False"
    correct_answer_idx: 0
  - category: "S3" 
    prompt: "S3 buckets are deployed regionally, so you must select a destination region when creating a new bucket"
    choices: 
      - "True"
      - "False"
    correct_answer_idx: 0
  - category: "S3"
    prompt: "By default, new S3 buckets are open and accessible by the entire world"
    choices: 
      - "True"
      - "False"
    correct_answer_idx: 0
  - category: "S3"
    prompt: "You can use S3 to host a static web site"
    choices:
      - "True"
      - "False"
    correct_answer_idx: 0
  - category: "Lambda"
    prompt: "How many executions per second can a lambda function handle?"
    choices: 
      - "Tens of executions per second"
      - "Hundreds of executions per second"
      - "Thousands of executions per second"
      - "Tens of thousands of executions per second"
    correct_answer_idx: 2
  - category: "ECS"
    prompt: "What is the task defintion within the context of ECS?"
    choices: 
      - "The task definition specifies how long a particular container is allowed to run on ECS" 
      - "The task defintion is a simple human-legible description of the work that a given ECS job is going to perform"
      - "The task definition allows you to specify the docker image to run, memory and CPU settings, logging configuration and more"
      - "The task defintion is a queue and asynchronous job specification that allows you to define work that needs to happen periodically"
    correct_answer_idx: 2
  - category: "ECS"
    prompt: "What are the two possible capacity strategies for an ECS cluster?"
    choices:
      - "EC2-backed, where you must deploy and correctly configure EC2 instances to join the ECS cluster, and Fargate, which is the serverless correlate that does not require you to manage individual servers"
      - "EC2-backed, where you are charged the underlying cost of the EC2 servers that are forming your cluster, and Fargate, which allows connection to on-premises resources you are running outside of AWS"
      - "Fargate is a higher tier of performance that leads to faster container cold starts at the tradeoff of being markedly more expensive than EC2-backed"
      - "Advanced tier, which allows you to use larger EC2 instances to back the ECS cluster, and Standard tier, where you can only use EC2 instances up to size m4.large to back the ECS cluster"
    correct_answer_idx: 0
  - category: "ECS"
    prompt: "Which answer best describes the different ideal use cases for the Fargate and EC2 capacity providers in ECS?"
    choices:
      - "You can only use EC2-backed clusters for ECS if you do not need the container running in ECS to connect to other AWS services"
      - "Use Fargate for small or large workloads that require low admin overhead, tiny workloads and batch workloads, whereas the EC2-backed strategy is better for workloads that require consistently high CPU and memory usage"
      - "Fargate is only suited for running simple, single-process binaries that do not connect to external services"
      - "Fargate should never be used for production workloads as it does not support traffic over HTTPS"
    correct_answer_idx: 1 
  - category: "ECS" 
    prompt: "What is AWS Copilot CLI?"
    choices: 
      - "AWS Copilot CLI is an AI assistant trained on billions of lines of public code to offer in-editor suggestions as you write code"
      - "AWS Copilot CLI is an AI assistant that can monitor you while you code and alert you if you attempt to define an invalid ECS task definition"
      - "AWS Copilot CLI is an open-source project that simplifies and partially automates the packaging and deployment of containerized apps for ECS and App Runner"
      - "AWS Copilot CLI is an ECS cluster monitoring tool that is similar in concept to kubectl for managing kubernetes clusters"
    correct_answer_idx: 2
  - category: "ECS"
    prompt: "You can use ECS to run applications that are not containerized"
    choices: 
      - "True"
      - "False"
    correct_answer_idx: 1
  - category: "ECS"
    prompt: "When writing an ECS task defintion, what is the maximum number of containers you can specify?"
    choices: 
      - "1"
      - "3"
      - "5"
      - "10"
      - "20"
    correct_answer_idx: 3
  - category: "ECS"
    prompt: "You can define the ports to open for your application in the task defintion"
    choices: 
      - "True"
      - "False"
    correct_answer_idx: 0
  - category: "ECS"
    prompt: "An ECS container agent is required to be running on an EC2 instance backing an ECS cluster"
    choices: 
      - "True"
      - "False"
    correct_answer_idx: 0
  - category: "ECS"
    prompt: "What is the purpose of an ECS container agent?"
    choices: 
      - "An ECS container agent ensures that you don't attempt to run containers directly on EC2 instances that are backing an ECS cluster"
      - "An ECS container agent sends information about currently running tasks and the resource utilization of your containers to ECS. It also starts and stops tasks whenever it receives a request from ECS"
      - "An ECS container agent prevents any non-containerized apps from running on EC2 instances that are backing an ECS cluster"
      - "An ECS container agent is installed by ECS on every new EC2 instance you launch after you first use the ECS service in a new AWS account"
    correct_answer_idx: 1




